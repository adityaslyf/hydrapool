// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(uuid())
  email             String   @unique
  wallet            String   @unique
  username          String?
  displayName       String?  @map("display_name")
  bio               String?
  profilePictureUrl String?  @map("profile_picture_url")
  status            String   @default("active")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relations
  friends      Friend[]           @relation("UserFriends")
  friendOf     Friend[]           @relation("FriendUser")
  splits       Split[]            @relation("SplitCreator")
  participants SplitParticipant[]

  @@map("users")
}

model Friend {
  id          String    @id @default(uuid())
  userId      String    @map("user_id")
  friendId    String    @map("friend_id")
  status      String    @default("pending")
  requestedAt DateTime  @default(now()) @map("requested_at")
  acceptedAt  DateTime? @map("accepted_at")
  createdAt   DateTime  @default(now()) @map("created_at")

  // Relations
  user   User @relation("UserFriends", fields: [userId], references: [id], onDelete: Cascade)
  friend User @relation("FriendUser", fields: [friendId], references: [id], onDelete: Cascade)

  // Ensure unique friendship pairs
  @@unique([userId, friendId])
  @@map("friends")
}

model Split {
  id          String   @id @default(uuid())
  title       String
  description String?
  creatorId   String   @map("creator_id")
  totalAmount Float    @map("total_amount")
  perShare    Float    @map("per_share")
  status      String   @default("active")
  currency    String   @default("USDC")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  creator      User                @relation("SplitCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  participants SplitParticipant[]

  @@map("splits")
}

model SplitParticipant {
  id                   String    @id @default(uuid())
  splitId              String    @map("split_id")
  userId               String    @map("user_id")
  amountOwed           Float?    @map("amount_owed")
  paid                 Boolean   @default(false)
  paidAt               DateTime? @map("paid_at")
  paymentTransactionId String?   @map("payment_transaction_id")
  paymentStatus        String    @default("pending") @map("payment_status")

  // Relations
  split Split @relation(fields: [splitId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Ensure unique participant per split
  @@unique([splitId, userId])
  @@map("split_participants")
}
